[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "crack"
version = "0.2.0"
description = "A collection of software license generation tools"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Crack Team", email = "crack@example.com"},
]
maintainers = [
    {name = "Crack Team", email = "crack@example.com"},
]
keywords = ["license", "keygen", "software", "tools"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.12"
dependencies = [
    "annotated-types>=0.7.0",
    "asarpy>=1.0.1",
    "click>=8.2.2",
    "crypto-plus>=1.0.6",
    "fastapi>=0.116.1",
    "grequests>=0.7.0",
    "h11>=0.16.0",
    "lxml>=6.0.0",
    "pydantic>=2.11.7",
    "pydantic-core>=2.33.2",
    "pysocks>=1.7.1",
    "requests>=2.32.4",
    "starlette>=0.47.2",
    "typing-extensions>=4.14.1",
    "uvicorn>=0.35.0",
    "websockets>=15.0.1",
]

[project.optional-dependencies]
dev = [
    "black>=24.0.0",
    "pylint>=3.0.0",
    "mypy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.6.0",
    "ruff>=0.1.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
]

[project.urls]
Homepage = "https://github.com/example/crack"
Documentation = "https://github.com/example/crack#readme"
Repository = "https://github.com/example/crack.git"
Issues = "https://github.com/example/crack/issues"

[project.scripts]
crack = "crack.cli:main"
jetbrains = "crack.jetbrains_cli:main"
jetbrains-server = "crack.jetbrains_cli:server"
jetbrains-plugins = "crack.jetbrains_cli:update_plugins"
dbeaver = "crack.dbeaver_cli:main"
typora = "crack.typora_cli:main"
xmind = "crack.xmind_cli:main"
gitlab = "crack.gitlab_cli:main"
atlassian = "crack.atlassian_cli:main"
finalshell = "crack.finalshell_cli:main"
surely = "crack.surely_cli:main"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "invalid-name",
]

[tool.pylint.format]
max-line-length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
